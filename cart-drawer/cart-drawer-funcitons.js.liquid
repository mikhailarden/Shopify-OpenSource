{% comment %}
Created by: Simon Neufville [simon@micainteractive.com]
Created on: January 25, 2018
Cart drawer scripts
{% endcomment %}

const cartDrawer = document.querySelector('#cartDrawer');
const cartButton = document.querySelector('#cartButton');
const drawerCloseButton = document.querySelector('#drawerCloseButton');

{% comment %}
Adds an event listener that fires when the cart icon is clicked
Adds css classes required to show the drawer
Calls refreshCart() to update the shopping cart content
{% endcomment %}
cartButton.addEventListener('click', function() {
    $(cartDrawer).addClass('drawer-show');
    $(cartDrawer).addClass('drawer-transition');
    refreshCart();
});

{% comment %}
Adds an event listener that fires when the cart drawer close button trigger button is clicked
Removes css classes from element in question: cartDrawer in this context.
{% encomment %}
drawerCloseButton.addEventListener('click', function () {
    $(cartDrawer).removeClass('drawer-show');
    $(cartDrawer).removeClass('drawer-transition');
});

const showCartDrawer = function () {
    const drawerElement = document.querySelector('#cartDrawer');
};

{% comment %}
Utilizes JQuery.ajax to retrieve the contents of the shopping cart and calls constructCartContent() to update the cart drawer
{% endcomment %}
const refreshCart = function () {
    $.ajax({
        dataType: 'json',
        method: 'GET',
        url: '/cart.js',
        success: function (result, status) {

            const itemCount = result.item_count ? result.item_count : 0;

            const itemList = result.items ? result.items : [];

            const totalPrice = result.total_price ? result.total_price : 0;

            constructCartContent(itemCount, itemList, totalPrice);
        },
        error: function (xhr, status, error) {
            console.log(error);
        }
    });
};

{% comment %}
Given parameters, constructs the HTML to be shown in a cart drawer
@param itemCount: An integer that represents the number of items currently in the cart
@param itemList: An array of items currently in the shopping cart
@param totalPrice: A number that represents the total cost of all items in the cart
{% endcomment %}
const constructCartContent = function (itemCount, itemList, totalPrice) {

    const cartTitleText = document.querySelector('#cartTitleText');

    var countText = ' Item ';

    if (itemCount !== 1) countText = ' Items '

    cartTitleText.innerHTML = itemCount + countText + '(' + totalPrice + ')';

    const cartItemsList = document.querySelector('#cartItemsList');

    if (!itemList.length) {
        return;
    }

    cartItemsList.innerHTML = "";

    itemList.forEach( function (item) {

        const itemImage = document.createElement('img');
        itemImage.src = item.image;

        const cartItemImage = document.createElement('div');
        cartItemImage.classList.add('cart-item-image');
        cartItemImage.appendChild(itemImage);

        const itemInfoHeading = document.createElement('h4');
        itemInfoHeading.appendChild(document.createTextNode(item.title));

        const itemInfoVendor = document.createElement('p');
        itemInfoVendor.appendChild(document.createTextNode(item.vendor));

        const itemInfoPrice = document.createElement('p');
        itemInfoPrice.appendChild(document.createTextNode(item.price));

        const cartItemInfo = document.createElement('div');
        cartItemInfo.classList.add('cart-item-info');
        cartItemInfo.appendChild(itemInfoHeading);
        cartItemInfo.appendChild(itemInfoVendor);
        cartItemInfo.appendChild(itemInfoPrice);

        const cartItem = document.createElement('div');
        cartItem.classList.add('cart-item');
        cartItem.appendChild(cartItemImage);
        cartItem.appendChild(cartItemInfo);

        const cartItemContainer = document.createElement('div');
        cartItemContainer.classList.add('cart-item-container');
        cartItemContainer.appendChild(cartItem);
        cartItemsList.appendChild(cartItemContainer);
    });
}
